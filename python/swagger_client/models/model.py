# coding: utf-8

"""
    Modelstore

    Machine Learning model store api   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: noonefornow@nowhere.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

import pprint
import re  # noqa: F401

import six

from swagger_client.models.category import Category  # noqa: F401,E501
from swagger_client.models.model_data import ModelData  # noqa: F401,E501
from swagger_client.models.tag import Tag  # noqa: F401,E501


class Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'algorithm': 'str',
        'training_data': 'object',
        'models': 'list[ModelData]',
        'tags': 'list[Tag]',
        'category': 'Category',
        'formats': 'list[str]',
        'status': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'algorithm': 'algorithm',
        'training_data': 'trainingData',
        'models': 'models',
        'tags': 'tags',
        'category': 'category',
        'formats': 'formats',
        'status': 'status'
    }

    def __init__(self, id=None, name=None, algorithm=None, training_data=None, models=None, tags=None, category=None, formats=None, status=None):  # noqa: E501
        """Model - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._algorithm = None
        self._training_data = None
        self._models = None
        self._tags = None
        self._category = None
        self._formats = None
        self._status = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.algorithm = algorithm
        if training_data is not None:
            self.training_data = training_data
        if models is not None:
            self.models = models
        if tags is not None:
            self.tags = tags
        self.category = category
        if formats is not None:
            self.formats = formats
        if status is not None:
            self.status = status

    @property
    def id(self):
        """Gets the id of this Model.  # noqa: E501


        :return: The id of this Model.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Model.


        :param id: The id of this Model.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Model.  # noqa: E501


        :return: The name of this Model.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Model.


        :param name: The name of this Model.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def algorithm(self):
        """Gets the algorithm of this Model.  # noqa: E501


        :return: The algorithm of this Model.  # noqa: E501
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this Model.


        :param algorithm: The algorithm of this Model.  # noqa: E501
        :type: str
        """
        if algorithm is None:
            raise ValueError("Invalid value for `algorithm`, must not be `None`")  # noqa: E501

        self._algorithm = algorithm

    @property
    def training_data(self):
        """Gets the training_data of this Model.  # noqa: E501


        :return: The training_data of this Model.  # noqa: E501
        :rtype: object
        """
        return self._training_data

    @training_data.setter
    def training_data(self, training_data):
        """Sets the training_data of this Model.


        :param training_data: The training_data of this Model.  # noqa: E501
        :type: object
        """

        self._training_data = training_data

    @property
    def models(self):
        """Gets the models of this Model.  # noqa: E501


        :return: The models of this Model.  # noqa: E501
        :rtype: list[ModelData]
        """
        return self._models

    @models.setter
    def models(self, models):
        """Sets the models of this Model.


        :param models: The models of this Model.  # noqa: E501
        :type: list[ModelData]
        """

        self._models = models

    @property
    def tags(self):
        """Gets the tags of this Model.  # noqa: E501


        :return: The tags of this Model.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Model.


        :param tags: The tags of this Model.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def category(self):
        """Gets the category of this Model.  # noqa: E501


        :return: The category of this Model.  # noqa: E501
        :rtype: Category
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Model.


        :param category: The category of this Model.  # noqa: E501
        :type: Category
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def formats(self):
        """Gets the formats of this Model.  # noqa: E501


        :return: The formats of this Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._formats

    @formats.setter
    def formats(self, formats):
        """Sets the formats of this Model.


        :param formats: The formats of this Model.  # noqa: E501
        :type: list[str]
        """

        self._formats = formats

    @property
    def status(self):
        """Gets the status of this Model.  # noqa: E501

        model status in the store  # noqa: E501

        :return: The status of this Model.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Model.

        model status in the store  # noqa: E501

        :param status: The status of this Model.  # noqa: E501
        :type: str
        """
        allowed_values = ["available", "training", "deleted"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Model):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
