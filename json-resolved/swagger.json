{
  "swagger" : "2.0",
  "info" : {
    "description" : "Machine Learning model store api\n",
    "version" : "1.0.0",
    "title" : "Modelstore",
    "termsOfService" : "http://swagger.io/terms/",
    "contact" : {
      "email" : "noonefornow@nowhere.org"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host" : "virtserver.swaggerhub.com",
  "basePath" : "/roboblocks/models/1.0.0",
  "tags" : [ {
    "name" : "model",
    "description" : "mock around with models"
  } ],
  "schemes" : [ "https", "http" ],
  "paths" : {
    "/model" : {
      "post" : {
        "tags" : [ "model" ],
        "summary" : "Add a new model",
        "operationId" : "addModel",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Model to be stored",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Model"
          }
        } ],
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "modelstore_auth" : [ "write:models", "read:models" ]
        } ]
      },
      "put" : {
        "tags" : [ "model" ],
        "summary" : "Update an existing model",
        "operationId" : "updateModel",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Model object to be added to the store",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Model"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Modle not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        },
        "security" : [ {
          "modelstore_auth" : [ "write:models", "read:models" ]
        } ]
      }
    },
    "/model/findByStatus" : {
      "get" : {
        "tags" : [ "model" ],
        "summary" : "Finds Model by status",
        "description" : "Multiple status values can be provided with comma separated strings",
        "operationId" : "findModelsByStatus",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "status",
          "in" : "query",
          "description" : "Status values that need to be considered for filter",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string",
            "default" : "available",
            "enum" : [ "available", "training", "deleted" ]
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Model"
              }
            }
          },
          "400" : {
            "description" : "Invalid status value"
          }
        },
        "security" : [ {
          "modelstore_auth" : [ "write:models", "read:models" ]
        } ]
      }
    },
    "/model/findByTags" : {
      "get" : {
        "tags" : [ "model" ],
        "summary" : "Finds Models by tags",
        "description" : "Muliple tags can be provided with comma separated strings. Use\\ \\ tag1, tag2, tag3 for testing.",
        "operationId" : "findModelsByTags",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "tags",
          "in" : "query",
          "description" : "Tags to filter by",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Model"
              }
            }
          },
          "400" : {
            "description" : "Invalid tag value"
          }
        },
        "security" : [ {
          "modelstore_auth" : [ "write:models", "read:models" ]
        } ]
      }
    },
    "/model/id/{modelId}" : {
      "get" : {
        "tags" : [ "model" ],
        "summary" : "Find model by ID",
        "description" : "Returns a model of a version with a specific ID",
        "operationId" : "getModelById",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "modelId",
          "in" : "path",
          "description" : "ID of the model to return",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Model"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Model not found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "model" ],
        "summary" : "Updates a model in the store with form data",
        "operationId" : "updateModelWithForm",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "modelId",
          "in" : "path",
          "description" : "ID of the model that needs to be updated",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "name",
          "in" : "formData",
          "description" : "Updated name of the model",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "status",
          "in" : "formData",
          "description" : "Updated status of the model",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "modelstore_auth" : [ "write:models", "read:models" ]
        } ]
      },
      "delete" : {
        "tags" : [ "model" ],
        "summary" : "Deletes a model by Id",
        "operationId" : "deleteModelById",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "api_key",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "modelId",
          "in" : "path",
          "description" : "Model id to delete",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Model not found"
          }
        },
        "security" : [ {
          "modelstore_auth" : [ "write:models", "read:models" ]
        } ]
      }
    },
    "/model/name/{modelName}" : {
      "get" : {
        "tags" : [ "model" ],
        "summary" : "Find model by Name",
        "description" : "Returns the best model by Name",
        "operationId" : "getModelByName",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "modelName",
          "in" : "path",
          "description" : "Name of the model to return",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Model"
            }
          },
          "400" : {
            "description" : "Invalid Name supplied"
          },
          "404" : {
            "description" : "Model not found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "model" ],
        "summary" : "Deletes a model by name",
        "operationId" : "deleteModelByName",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "api_key",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "modelName",
          "in" : "path",
          "description" : "Model name to delete",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid Name supplied"
          },
          "404" : {
            "description" : "Model not found"
          }
        },
        "security" : [ {
          "modelstore_auth" : [ "write:models", "read:models" ]
        } ]
      }
    },
    "/model/{modelId}/uploadModel" : {
      "post" : {
        "tags" : [ "model" ],
        "summary" : "uploads the model data",
        "operationId" : "uploadFile",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelId",
          "in" : "path",
          "description" : "ID of Model to update",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "additionalMetadata",
          "in" : "formData",
          "description" : "Additional data to pass to server",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "file",
          "in" : "formData",
          "description" : "file to upload",
          "required" : false,
          "type" : "file"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        },
        "security" : [ {
          "modelstore_auth" : [ "write:models", "read:models" ]
        } ]
      }
    }
  },
  "securityDefinitions" : {
    "modelstore_auth" : {
      "type" : "oauth2",
      "authorizationUrl" : "http://modelstore.swagger.io/oauth/dialog",
      "flow" : "implicit",
      "scopes" : {
        "write:models" : "modify model store",
        "read:models" : "read acces for  model store"
      }
    },
    "api_key" : {
      "type" : "apiKey",
      "name" : "api_key",
      "in" : "header"
    }
  },
  "definitions" : {
    "Category" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string"
        }
      },
      "example" : {
        "name" : "name",
        "id" : 1
      },
      "xml" : {
        "name" : "Category"
      }
    },
    "Tag" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string"
        }
      },
      "example" : {
        "name" : "name",
        "id" : 6
      },
      "xml" : {
        "name" : "Tag"
      }
    },
    "Model" : {
      "type" : "object",
      "required" : [ "algorithm", "category", "name" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string",
          "example" : "tensorflow"
        },
        "algorithm" : {
          "type" : "string"
        },
        "trainingData" : {
          "type" : "object",
          "properties" : { }
        },
        "models" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ModelData"
          }
        },
        "tags" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Tag"
          }
        },
        "category" : {
          "$ref" : "#/definitions/Category"
        },
        "formats" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "status" : {
          "type" : "string",
          "description" : "model status in the store",
          "enum" : [ "available", "training", "deleted" ]
        }
      },
      "example" : {
        "models" : [ {
          "name" : "tesorflow",
          "modelUrl" : "modelUrl",
          "version" : 1.1
        }, {
          "name" : "tesorflow",
          "modelUrl" : "modelUrl",
          "version" : 1.1
        } ],
        "formats" : [ "formats", "formats" ],
        "name" : "tensorflow",
        "trainingData" : "{}",
        "id" : 0,
        "category" : {
          "name" : "name",
          "id" : 1
        },
        "algorithm" : "algorithm",
        "tags" : [ {
          "name" : "name",
          "id" : 6
        }, {
          "name" : "name",
          "id" : 6
        } ],
        "status" : "available"
      },
      "xml" : {
        "name" : "Model"
      }
    },
    "ModelData" : {
      "type" : "object",
      "required" : [ "modelUrl", "name", "version" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "tesorflow"
        },
        "modelUrl" : {
          "type" : "string"
        },
        "version" : {
          "type" : "number",
          "example" : 1.1
        }
      },
      "example" : {
        "name" : "tesorflow",
        "modelUrl" : "modelUrl",
        "version" : 1.1
      }
    },
    "ApiResponse" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "integer",
          "format" : "int32"
        },
        "type" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        }
      },
      "example" : {
        "code" : 0,
        "type" : "type",
        "message" : "message"
      }
    }
  },
  "externalDocs" : {
    "description" : "Find out more about Swagger",
    "url" : "http://swagger.io"
  }
}